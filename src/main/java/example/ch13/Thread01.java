package example.ch13;

public class Thread01 {
    public static void main(String[] args){
        /**
         *    - 프로세스와 쓰레드(process & thread)
         *
         *      프로세스 : 실행 중인 프로그램, 자원(resource : 메모리, cpu, 다른 컴퓨터 디바이스 ...)과 쓰레드로 구성.
         *      쓰레드  : 프로세스 내에서 실제 작업을 수행.
         *               모든 프로세스는 최소한 하나의 쓰레드를 가지고 있다.
         *
         *                  " 프로세스 : 쓰레드 = 공장(작업환경) : 일꾼(작업자) "
         *               1. 싱글 쓰레드 프로세스 : 자원 + 쓰레드 1개.
         *               2. 멀티 쓰레드 프로세스 : 자원 + 쓰레드 + 쓰레드 + ... + 쓰레드.
         *                                      여러 작업을 나눠서 동시에 수행할 수 있어서 싱글 쓰레드보다 효율적으로 작업을 수행해낼 수 있다.
         *                                      우리가 사용하는 프로그램의 대부분은 멀티 쓰레드 프로세스이다.
         *
         *      " 하나의 새로운 프로세스를 생성하는 것보다 하나의 새로운 쓰레드를 생성하는 것이 더 적은 비용이 든다. "
         *
         *      CGI(프로세스 2, 쓰레드 1) -> Java Servlet(프로세스 1, 쓰레드 2)
         *          1999년, 90년대 말에 웹의 폭발적인 성장과 함께 그 수요를 감당하기 위해서 Java에서 Servlet이라는 기술을 내놓았다.
         *          같은 자원을 가지고도 더 많은 사용자의 요청을 처리할 수 있기 때문에 자바의 성장과 인기에 한 몫하였다.
         *
         *    - 멀티쓰레드의 장단점
         *      대부분의 프로그램이 멀티쓰레드로 작성되어 있으나, 멀티쓰레드 프로그래밍이 장점만 있는 것은 아니다.
         *
         *          1.장점 : 시스템 자원을 보다 효율적으로 사용할 수 있다.
         *                  사용자에 대한 응답성(responseness)이 향상된다.
         *                  작업이 분리되어 코드가 간결해 진다.
         *                      즉, "여러 모로 좋다"
         *          2.단점 : 대부분의 단점은 여러 쓰레드가 하나의 프로세스를 *공유* 하면서 생기는데, 우선 동기화(synchronization)에 주의해야 한다.
         *                  교착상태(dead-lock)가 발생하지 않도록 주의해야 한다.
         *                  각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.
         *                      즉, "프로그래밍할 때 고려해야 할 사항들이 많다."
         */
    }
}
