package example.ch06;

public class OOP16 {
    public static void main(String[] args){
        /**
         *    - 생성자(constructor)
         *      인스턴스(객체)가 생성될 때마다 호출되는 '인스턴스 초기화 메서드'
         *          ex) Time t = new Time(); <- 생성자 호출
         *              t.hour = 12; <- 초기화
         *              t.minute = 34;
         *              t.second = 56;
         *
         *              위의 예시를 간단히.
         *              Time t = new Time(12, 34, 56); <- 생성자 호출
         *
         *      인스턴스 생성시 수행할 작업(인스턴스 변수 초기화)에 사용
         *
         *    - 생성자(인스턴스 초기화 메서드)를 만드는 이유?
         *      인스턴스 초기화를 편리하게 하기 위해.
         *
         *
         *    - 생성자 초기화 규칙
         *      1. 이름이 클래스 이름과 같아야 한다.
         *      2. 리턴값이 없다.(void 안 붙혀도 된다.)
         *      3. 모든 클래스는 반드시 생성자를 가져야 한다.(1개 이상)
         *         Card c = new Card(); <- 기본 생성자 호출(컴파일러가 생성자가 하나도 없을때만 자동으로 추가를 해준다.)
         *
         *          클래스이름(생성자이름)(타입 변수명, 타입 변수명, ...) {
         *              //인스턴스 생성 시 수행될 코드
         *              // 주로 인스턴스 변수의 초기화 코드를 적는다.
         *          }
         *
         *       ex)
         *          class Card { //클래스 이름.
         *              Card() { // 매개변수 없는 생성자.
         *                  // 인스턴스 초기화 작업
         *              }
         *
         *              Card(String kind, int number) { // 매개변수 있는 생성자
         *                  // 인스턴스 초기화 작업
         *              }
         *          }
         *
         *
         *    - 기본 생성자(default constructor)
         *      매개변수가 없는 생성자
         *      생성자가 하나도 없을 때만, 컴파일러가 자동 추가해준다.
         *          ex) 클래스이름(){} // 기본 생성자
         */

        Data_1 d1 = new Data_1(); // 생성자가 하나도 없을 때만, 컴파일러가 기본 생성자 자동 추가해준다.
        Data_2 d2 = new Data_2(); // compile error 발생, 기본생성자가 없기 때문에 해당 생성자를 찾을 수 없다는 에러가 발생한다.


        //매개변수가 있는 생성자를 사용한 초기화 방법예시.
        Car c = new Car("white", "auto", 4);

        /* 기본 생성자를 이용하여 객체를 생성하고 초기화.
        위와 같은 매개변수가 있는 생성자호출을 하여 초기화 하는 것과는 기능적으로 차이가 없지만, 코드가 간결해지고 재사용성이 있고 편리하여 좋다.
        Car c = new Car();
        c.color = "white";
        c.gearType = "auto";
        c.door = 4;*/
    }
}
class Data_1{
    int value;
    //Data_1(){ } <- 컴파일러가 만들어준 숨겨진 기본 생성자.
}
class Data_2{
    int value;
    Data_2(int x){ // 매개변수가 있는 생성자.
        value = x;
    }
    Data_2(){} //생성자가 한 개 이상 있다면 이와 같은 기본 생성자도 만들어 줘야 한다. 위의 에러 예시를 확인하려면 주석처리.
}

        /**
         *    - 매개변수가 있는 생성자
         *      기본생성자 함수와 다르게 초기화를 생성자 메소드에 지정해둬서 코드가 간결해지고 재사용성이 확장되고 편리하게 사용할 수 있다는 여러 이점이 있다.
         */
class Car{
    String color;       // 색상
    String gearType;    // 변속기 종류 - auto(자동), manual(수동)
    int door;           // 문 의 개수

    Car(){} // 기본 생성자
    Car(String c, String g, int d){ //매개변수가 있는 생성자.
        color = c;
        gearType = g;
        door = d;
    }
}