package example.ch06;

public class OOP09 {
    public static void main(String[] args){
        /**
         *    - 메서드란?
         *      1. 객체지향 용어에서 함수를 지칭하는 용어.
         *          - 함수와 다른 이유는 꼭 클래스안에 있어야하는데, 함수는 클래스에 독립적(따로 존재)입니다.
         *      2. 문장들을 {괄호}로 묶어놓은 것.
         *          - 작업단위로 문장들을 묶어서 이름을 붙인 것.
         *      3. 값(입력)을 받아서 처리하고, 결과를 반환(출력)
         *
         *          ex) int add(int x, int y) { // 선언부 == 반환 타입(출력) 메서드 이름 (매개변수선언(입력)) { return 결과반환 };  <- 매개변수는 0~n개 가능.
         *                  int result = x + y;
         *                  return result; //구현부 == 메서드 호출시 수행될 코드, 결과를 반환
         *              }
         *      4. Blackbox : 뭔가를 입력하면 뭔가를 출력하기에 해당 용어로 불리기도 한다.
         *
         *    - 메서드의 장점
         *      1. 코드의 중복을 줄일 수 있다.
         *      2. 코드의 관리가 쉽다.
         *      3. 코드를 재사용할 수 있다.
         *      4. 코드가 간결해서 이해하기 쉬워진다.
         *
         *
         *    - 메서드의 작성
         *      1. 반복적으로 수행되는 여러 문장을 메서드로 작성
         *      2. 하나의 메서드는 한 가지 기능만 수행하도록 작성
         *
         */

    }

    int add(int a, int b){  // <- 선언부 : int == 작업 결과 반환 타입 , add == 메서드 이름 혹은 선언부 이름 , int a && int b : 매개 변수 혹은 입력 값 혹은 지역 변수( 0개 ~ n개)
        int result = a + b; // <- 구현부
        return result;      // <- 구현부 : 호출한 메서드로 결과를 반환한다. ( 0 ~ 1개 )
    }

    void noReturn(){
        System.out.println("반환 값이 없을때는 void타입을 메서드 반환타입으로 작성하면 된다.");
    }
}
