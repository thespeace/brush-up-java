package example.ch06;

public class OOP07 {
    public static void main(String[] args){
        /**
         *    - 선언위치에 따른 변수의 종류
         *      변수의 종류는 어디에 선언했느냐에 따라서 종류가 세 가지로 나뉘어 집니다.
         *
         *      1) 영역 - 1.클래스 영역 : 선언문만 가능( 변수 선언, 메서드 정의(선언) ), 일반적으로는 변수를 먼저 선언하지만 순서는 상관 없다.
         *               2.메서드 영역 : 메서드의 시작( { ) 과 끝( } ).
         *
         *      2) 변수 : 선언 위치에 따라 달라진다. 메서드 영역이 아니면 클래스 영역인 것이다.
         *
         *               1. 클래스 변수
         *                      - 영역 : 클래스 영역
         *                      - 생성시기 : 클래스가 메모리에 올라갈 때, 즉 클래스(설계도)가 필요할 때.
         *                                 풀어서 설명을 하자면 SSD,HDD에 저장된 파일(설계도)을 cpu가 가져오려면 직접 가져오지 못한다.
         *                                 왜냐하면 cpu의 속도가 월등히 빠르기 때문에 바로 읽지 못한다. 그래서 중간에 연결을 해주는 RAM(메모리)을 통해 읽어야 한다.
         *                                 따라서 저장장치의 파일을 메모리에 올려야하는데 이를 로딩(loading)이라 하고, 이러한 작업을 끝마쳐야 cpu가 읽을 수 있게 됩니다.
         *                                 cpu는 모든 작업을 메모리 하고만 합니다. cpu와 메모리가 작업을 한 후, 메모리에 담긴 작업 내용을 다시 디스크에 저장을 해야하는데, 이를 세이브(save)라고 합니다.
         *                                 위의 일련 과정들을 살펴보면 우리가 모든 작업을 하기 위해서는 파일이 메모리에 올라와야 합니다. 그걸 바로 클래스가 메모리에 올라간다고 이야기 하는 것입니다.
         *                                 예를 들어 Time.class라는 파일이 메모리에 올라가면서 자동으로 클래스 변수가 만들어 집니다.
         *                                 클래스 변수는 객체 생성을 안해도 자동으로 만들어집니다. <-> 인스턴스 변수는 객체를 생성해야 한다.
         *               2. 인스턴스 변수
         *                      - 영역 : 클래스 영역
         *                      - 생성시기 : * 인스턴스가 생성 * 되었을 때, 즉 객체를 생성(선언 및 초기화)하였을 때.
         *                                 ** 객체란? iv를 묶어 놓은 것. ** <- 해당 말은 엄밀히 이야기하면 틀릴수도 있지만, 철저하게 프로그래밍 관점에서 이해하기에는 좋다.
         *                                 + 복습차원에서 객체 제거 설명 : iv를 묶어놓은 객체들은 해당 주소값을 가리키고 있는 참조변수가 없어지면, GC(가비지 컬렉터)에 의해 제거됩니다.
         *               3. 지역 변수
         *                      - 영역 : 메서드 영역(클래스 영역 이외의 영역 : 메서드, 생성자, 초기화 블럭 내부)
         *                      - 생성시기 : 변수 선언문이 수행되었을 때, 즉 메서드가 호출이 되면 지역 변수의 유효 범위(scope)내에서만 유효하여 메서드 종료시 자동 제거.
         *
         *
         *      예시(Variables 클래스)를 통해 자세히 살펴봅시다.
         */
    }
}

class Variables{ //<- 클래스 영역

    int iv;         // 인스턴스 변수(instance Variables)

    static int cv;  // 클래스 변수( iv 앞에 static을 붙인 static변수, 공유변수 )

    void method(){ //<- 메서드 영역 + (1.메서드 선언)

        int lv = 0; // 지역 변수(local Variables) + (2.메서드 정의)

    }

}
