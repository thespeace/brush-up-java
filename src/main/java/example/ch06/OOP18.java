package example.ch06;

public class OOP18 {
    public static void main(String[] args){
        /**
         *    - 변수의 초기화
         *      지역변수는 수동 초기화(직접 초기화) 해야 된다.(** 사용 전 꼭!! **)
         *      멤버변수(인스턴스, 클래스)는 자동 초기화된다.
         *      
         *    - 인스턴스, 클래스 변수의 초기화의 종류
         *      1. 자동 초기화 : 컴파일러가 자동으로 초기화.
         *      2. 간단 초기화 : 명시적 초기화( = 대입 연산자)
         *      3. 복잡 초기화 : 블럭(인스턴스 변수, 거의 안쓰인다.), static 블럭(클래스 변수), 생성자(인스턴스 변수).
         */
    }
}
class InitTest{
    int x;      // 인스턴스 변수(각 타입의 기본값으로 자동 초기화).
    int y = x;  // 인스턴스 변수.

    void method1(){
        int i;      // 지역변수.
//        int j = i;  // 에러, 지역변수를 초기화하지 않고 사용하여서. i의 값을 모르는데 j에 담으려고해서.. 그 이유는?
        /**
         *   메서드가 메모리 공간을 사용하는데에 있어서, 여러 메서드가 같은 공간을 쓰고 또 쓰고 하는 특성상, 메소드가 호출될때마다 메모리공간을 0으로 초기화 한다면 성능이 떨어진다.
         *   성능을 높이기 위해 항상 0으로 초기화하지 않고, 새로운 값으로 덮어쓰는 방식으로 처리합니다. 지역변수는 메서드가 호출되서 작업하는 동안에만 존재하기 때문에 생명주기가 굉장히 짧다.
         *   매번 0으로 초기화하여 메서드를 사용하기 보다는 메서드는 빨리 실행되고 제거되는 것이 좋기때문에 항상 새로운 값으로 덮어씌웁니다. 덮어씌우는 식으로 초기화한다.
         *   때문에 수동 초기화를 해주어야 한다. <-> 인스턴스변수는 유지기간이 길기 때문에 자동초기화가 가능하다.
         * */
    }
}

/**
 *    - 멤버변수의 초기화
 *      아래의 예시 코드들로 알아보자.
 */
//1. 명시적 초기화(=) : 선언시 대입연산자를 사용하여 초기화(간단 초기화).
class Car3{
    String color;
    String gearType;
    int door = 4;            // 기본형(primitive type) 변수의 초기화
    Engine e = new Engine(); // 참조형(reference type) 변수의 초기화

/**
 *    2. 초기화 블럭 {} : 여러 문장이 필요할 때(복잡한 초기화).
 *       - 인스턴스 초기화 블럭 : { }
 *       - 클래스 초기화 블럭  : static { }
 */

//3. 생성자 : 인스턴스 변수 초기화, 복잡한 초기화에 사용한다.
    Car3(String color, String gearType, int door){
        this.color = color;
        this.gearType = gearType;
        this.door = door;
    }
}
class Engine{ }

// static 블럭의 사용 예시.
class StaticBlockTest {
    static int[] arr = new int[10]; // 명시적 초기화(간단 초기화)
    static { // 클래스 초기화 블럭 - 배열 arr을 난수로 채운다. (클래스 변수 복잡 초기화.)
        for (int i = 0; i < arr.length; i++)
            arr[i] = (int)(Math.random() * 10) + 1;
    }
}

/**
 *    - 멤버변수의 초기화 시점(언제?)
 *      클래스 변수 초기화 시점 : 클래스가 처음 로딩될 때 단 한번(메모리에 올라갈 때).
 *      인스턴스 변수 초기화 시점 : 인스턴스가 생성될 때 마다.
 */
class InitTest1{
    static int cv = 1; // 명시적 초기화
    int iv = 1;        // 명시적 초기화

    static{ cv = 2; }  // 클래스 초기화 블럭
    { iv = 2; }        // 인스턴스 초기화 블럭

    InitTest1(){ iv = 3; } // 생성자
}
// 위의 예시(InitTest1)의 초기화 순서
//      클래스 변수 초기화   : (1)기본값(0)으로 자동 초기화, (2)명시적 간단 초기화(=), (3)클래스 초기화 블럭으로 복잡 초기화( static {} ).
//      인스턴스 변수 초기화 : (4)기본값(0)으로 자동 초기화, (5)명시적 간단 초기화(=), (6)인스턴스 초기화 블럭으로 복잡 초기화( {} ), (7)생성자 초기화.

/**
 *    - 멤버변수의 초기화 순서
 *      * 클래스 변수 -> 인스턴스 변수.
 *      * 자동 초기화 -> 간단 초기화 -> 복잡 초기화.
 *
 */