package example.ch06;

public class OOP01 {
    public static void main(String[] args){
        /**
         *    - 객체지향이란?
         *      객체 지향 프로그래밍(영어: Object-Oriented Programming, OOP)은 컴퓨터 프로그래밍의 패러다임 중 하나.
         *
         *    - 역사
         *      80년 초 소프트웨어의 위기 : 빠른 변화를 못 쫓아감.
         *      해결책으로 객체지향 언어를 도입(절차적 -> 객체지향).
         *          기존의 C언어에 객체지향의 개념을 도입한 C++의 등장, C++의 기능은 우수한데 사용이 어려워 객체지향 개념이 확산이 안됐다.
         *          C++의 단점도 보완하고 C++의 안쓰는 개념들을 조금 더 사용하기 쉽게 만든 자바가 등장(1991.6)하면서 객체지향 개념이 일반화가 되었습니다.
         *
         *    - 특징
         *      코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거.
         *      객체지향 언어 = 프로그래밍 언어 + 객체지향개념(규칙, 규칙으로 인해 위와 같은 장점이 생기는 것. 무조건 외워라!)
         *
         *      * OOP의 4가지 핵심 개념 *
         *          1) 캡슐화
         *          2) 상속
         *          3) 추상화
         *          4) * 다형성 * : 다형성을 이해해야 객체지향개념을 이해하는 데 가장 많은 도움이 된다.
         *
         *    - 디자인 패턴?
         *      객체지향개념을 이용해서 프로그래밍을 할 때 자주 쓰이는 패턴들을 모아 둔 것.
         *      단, 해당 이론서로 넘어 가기전에 객체지향의 개념에 대해서 완벽하게 이해 하고 넘어가는 것이 중요하다.
         */

    }
}
